---
- name: "Ensure {{ container_name }} systemd service is stopped"
  ansible.builtin.systemd:
    scope: user
    name: "container-{{ container_name }}.service"
    enabled: no
    state: stopped
  register: "systemd_stop_result"
  failed_when: "systemd_stop_result is failed and 'Could not find the requested service' not in systemd_stop_result.msg"
  # systemd does not work when executed in a docker environment. It is also not needed, as the container will be
  # destroyed after execution.
  when: ansible_connection != "docker"

- name: "Ensure {{ container_name }} container is removed"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    state: absent

- name: "Ensure getent_passwd variable is setup"
  ansible.builtin.getent:
    database: passwd
    key: "{{ container_user }}"

- name: "Ensure {{ container_user }} id is retrieved"
  ansible.builtin.set_fact:
    container_user_id: "{{ getent_passwd[container_user].1 }}"

- name: "Pull {{ container_name }} image"
  containers.podman.podman_image:
    name: "{{ container_image }}"
    tag: "{{ container_image_tag }}"
    force: true

- name: "Ensure {{ container_name }} container is created"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    hostname: "{{ container_name }}"
    image: "{{ container_image }}:{{ container_image_tag }}"
    user: "{{ container_user_id }}"
    userns: keep-id
    recreate: no
    state: created
    env: "{{ container_env }}"
    volumes: "{{ container_volumes }}"
    ports: "{{ container_ports }}"
    network: "{{ container_networks }}"
    network_aliases: "{{ container_network_aliases }}"
    generate_systemd:
      path: "{{ container_user_systemd_directory }}"
      names: true

- name: "Ensure {{ container_name }} systemd service is activated"
  ansible.builtin.systemd:
    scope: user
    name: "container-{{ container_name }}.service"
    enabled: yes
    daemon_reload: yes
    state: started
  # systemd does not work when executed in a docker environment. It is also not needed, as the container will be
  # destroyed after execution.
  when: ansible_connection != "docker"

