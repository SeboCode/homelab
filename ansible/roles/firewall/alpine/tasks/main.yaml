---
- name: Ensure firewall is installed
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - ip6tables
    - iptables
    - awall

- name: Ensure awall policy is available
  ansible.builtin.copy:
    src: global-policy.json
    dest: /etc/awall/optional/

- name: Ensure awall traefik config is available
  ansible.builtin.template:
    src: traefik.json.j2
    dest: /etc/awall/optional/traefik.json

- name: Ensure awall port redirect config and policy are enabled
  community.general.awall:
    name: "{{ item }}"
    state: enabled
  loop:
    - global-policy
    - traefik

- name: Ensure awall policies are well defined
  ansible.builtin.command: "awall translate -o /tmp"

- name: Ensure awall policies are active
  community.general.awall:
    activate: true
  async: 3
  poll: 0
  become: true
  become_method: "{{ superuser_method }}"

- name: Sleep to avoid ssh issues due to the awall policy application
  ansible.builtin.pause:
    seconds: 3

- name: Ensure iptables is enabled in default runlevel
  ansible.builtin.service:
    name: iptables
    state: started
    enabled: true
    runlevel: default

- name: Ensure traffic is redirected from ports 80/443 to traefik ports for requests performed on localhost (does not go over PREROUTING nat, but over OUTPUT nat instead)
  ansible.builtin.iptables:
    table: nat
    chain: OUTPUT
    out_interface: lo
    protocol: tcp
    destination_ports: "{{ item.from }}"
    jump: REDIRECT
    to_ports: "{{ item.to }}"
    state: present
  loop:
    - {from: 80, to: "{{ traefik_web_port }}"}
    - {from: 443, to: "{{ traefik_websecure_port }}",}

- name: Ensure firewall rules stay persested after system restart
  ansible.builtin.command: rc-service iptables save

- name: Ensure iptables is reloaded with newly created rules file
  ansible.builtin.service:
    name: iptables
    state: restarted

