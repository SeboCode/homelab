---
- name: "Ensure {{ user_name }} is created"
  ansible.builtin.user:
    name: "{{ user_name }}"
    create_home: true
    home: "/home/{{ user_name }}"
    password: "{{ user_password | password_hash('sha512') }}"
    shell: /bin/sh
    state: present

# This is needed for the user to be able to create pseudo root and other users inside a container that are then
# mounted to a none root user with a uid and gid inside of the specified range on the host system.
- name: "Ensure subuid and subgid ranges are defined for {{ user_name }} to use"
  ansible.builtin.lineinfile:
    path: "{{ item }}"
    regexp: "^{{ user_name }}"
    line: "{{ user_name }}:100000:65536"
    state: present
    create: true
    insertafter: EOF
  loop:
    - "/etc/subuid"
    - "/etc/subgid"

- name: Ensure podman tmp file storage environment variable is exported in .ashrc
  ansible.builtin.lineinfile:
    path: "/home/{{ user_name }}/.ashrc"
    regexp: '^export XDG_RUNTIME_DIR'
    line: 'export XDG_RUNTIME_DIR=/run/user/"$(id -u)"'
    state: present
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    create: true
    insertafter: EOF

- name: Ensure user's ansible tmp directory exists
  ansible.builtin.file:
    path: "/home/{{ user_name }}/.ansible/tmp"
    state: directory
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: 0700

- name: Ensure user's s6 directory exists
  ansible.builtin.file:
    path: "/home/{{ user_name }}/s6-services/container-autostart"
    state: directory
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: 0755

- name: Ensure s6 run script for user exists in order for it to be filled with container startup commands
  ansible.builtin.copy:
    dest: "/home/{{ user_name }}/s6-services/container-autostart/run"
    content: |
      #!/bin/sh
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: 0755

- name: Ensure s6 supervisor script to execute on system startup
  ansible.builtin.copy:
    dest: "/etc/local.d/s6-{{ user_name }}.start"
    # ATTENTION: This command HAS to be executed in the user space. Otherwise, the specified services would be executed
    # as root, whilst beeing controlled/manipulated by the user => privilege escalation!
    content: |
      #!/bin/sh
      exec {{ superuser_method }} -u {{ user_name }} /bin/s6-svscan /home/{{ user_name }}/s6-services &
    owner: root
    group: root
    mode: 0755

