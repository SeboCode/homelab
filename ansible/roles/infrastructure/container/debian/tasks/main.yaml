---
- name: "Ensure {{ container_name }} systemd service is stopped"
  ansible.builtin.systemd:
    scope: user
    name: "container-{{ container_name }}.service"
    enabled: false
    state: stopped
  register: "result_container_stop"
  failed_when: "result_container_stop is failed and 'Could not find the requested service' not in result_container_stop.msg"

- name: "Ensure {{ container_name }} container is removed"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    state: absent

- name: "Ensure getent_passwd variable is setup"
  ansible.builtin.getent:
    database: passwd
    key: "{{ container_user }}"

- name: "Ensure {{ container_user }} id is retrieved"
  ansible.builtin.set_fact:
    container_user_id: "{{ getent_passwd[container_user].1 }}"

- name: "Pull {{ container_name }} image"
  containers.podman.podman_image:
    name: "{{ container_image }}"
    tag: "{{ container_image_tag }}"
    force: true

- name: "Ensure {{ container_name }} container is created"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    hostname: "{{ container_name }}"
    image: "{{ container_image }}:{{ container_image_tag }}"
    user: "{{ container_user_id }}"
    userns: keep-id
    recreate: false
    restart_policy: "no" # systemd manages container lifecycle
    state: created # systemd manages container lifecycle
    env: "{{ container_env }}"
    volumes: "{{ container_volumes }}"
    ports: "{{ container_ports }}"
    device: "{{ container_device }}"
    network: "{{ container_networks }}"
    network_aliases: "{{ container_network_aliases | default(omit) }}" # Cannot set alias in host network mode => used by traefik
    command: "{{ container_command | default(omit) }}"
    generate_systemd:
      path: "/home/{{ container_user }}/.config/systemd/user"
      names: true

- name: Run post container creation tasks
  include_tasks: "{{ post_container_creation_tasks }}"
  when: post_container_creation_tasks is defined

- name: "Ensure {{ container_name }} systemd service is activated"
  ansible.builtin.systemd:
    scope: user
    name: "container-{{ container_name }}.service"
    enabled: true
    daemon_reload: true
    state: started

