---
- name: Ensure s6 stops container supervision
  ansible.builtin.command: "s6-svc -d /home/{{ container_user }}/s6-services/{{ container_name }}"
  ignore_errors: true # If the service is not running or the folder does not exist

- name: "Ensure {{ container_name }} container is removed"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    state: absent

- name: "Ensure getent_passwd variable is setup"
  ansible.builtin.getent:
    database: passwd
    key: "{{ container_user }}"

- name: "Ensure {{ container_user }} id is retrieved"
  ansible.builtin.set_fact:
    container_user_id: "{{ getent_passwd[container_user].1 }}"

- name: "Pull {{ container_name }} image"
  containers.podman.podman_image:
    name: "{{ container_image }}:{{ container_image_tag }}"
    force: true

- name: "Ensure {{ container_name }} container is created"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    hostname: "{{ container_name }}"
    image: "{{ container_image }}:{{ container_image_tag }}"
    user: "{{ container_user_id }}"
    userns: keep-id
    recreate: false
    restart_policy: "no" # s6 manages container lifecycle
    state: created # s6 manages container lifecycle
    env: "{{ container_env }}"
    volumes: "{{ container_volumes }}"
    ports: "{{ container_ports }}"
    network: "{{ container_networks }}"
    network_aliases: "{{ container_network_aliases | default(omit) }}" # Cannot set alias in host network mode => used by traefik
    command: "{{ container_command | default(omit) }}"

- name: Run post container creation tasks
  include_tasks: "{{ post_container_creation_tasks }}"
  when: post_container_creation_tasks is defined

- name: Ensure user's s6 directory exists
  ansible.builtin.file:
    path: "/home/{{ container_user }}/s6-services/{{ container_name }}"
    state: directory
    owner: "{{ container_user }}"
    group: "{{ container_user }}"
    mode: 0755

- name: Ensure s6 run script for user exists in order for it to be filled with container startup commands
  ansible.builtin.copy:
    dest: "/home/{{ container_user }}/s6-services/{{ container_name }}/run"
    content: |
      #!/bin/sh
      exec podman start -a {{ container_name }}
    owner: "{{ container_user }}"
    group: "{{ container_user }}"
    mode: 0755

- name: Ensure s6 discoveres container supervision (Will also start the service, if it is new. However it will not start, if it already existed.)
  ansible.builtin.command: "s6-svscanctl -a /home/{{ container_user }}/s6-services"

- name: Ensure s6 starts container supervision (Will force the service to be in a started state.)
  ansible.builtin.command: "s6-svc -u /home/{{ container_user }}/s6-services/{{ container_name }}"

